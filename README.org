#+title:    :editor meow
#+subtitle: lightweight, modern modal editing
#+created:  May 19, 2024
#+since:    whenever v3 happens

* Description :unfold:

This module integrates [[https://github.com/meow-edit/meow][Meow]] with Doom Emacs.

The integration consists of:

- A 'port' of Doom's (emacs) leader and localleader bindings to Meow's Keypad state;

- A cursor configuration that uses the 'bar' cursor shape to indicate the way
  Emacs' cursor positioning differs from other modal editors, with
  ~cursor-blink-mode~ rather than a shape change to indicate a switch to Insert
  state;

- A custom =emacs= Meow state with minimal bindings, intended for modes that use
  the keys bound in Motion state, and as a means of demonstrating the process of
  defining a custom state;

- Numerous other tweaks, including to the suggested bindings, to integrate with
  Doom better.

It is recommended to read [[https://github.com/meow-edit/meow/blob/master/README.org][Meow's README]] prior to trying this module.

#+begin_quote
Meow is designed as a minimal, dependency-free modal 'layer' on top of Emacs,
preferring to leverage built-in functionality rather than reinventing the wheel.
If it seems to be 'missing' a feature present in another modal system, it may be
because the equivalent Emacs functionality is considered usable enough not to
warrant a Meow-flavored reimplementation. Accordingly, it is suggested to become
familiar with Emacs' basic concepts and features, at least up to the level
taught in the Tutorial (=M-x help-with-tutorial=).
#+end_quote

** Module flags
- +qwerty, +qwertz, +dvorak, +dvp, +colemak :: Set up Meow's suggested bindings
  for the respective layouts. If you don't use any of these flags, you will need
  to set up bindings yourself; see [[https://github.com/meow-edit/meow/blob/master/GET_STARTED.org#set-up-command-layout][the relevant docs]].

  You will probably want to look at the files responsible for defining the
  bindings (in this module's =autoload/= directory) in order to be aware of any
  tweaks applied by this module. If the reason for a tweak is not documented in
  its respective file, it probably is in =+qwerty=.

** Packages
- [[doom-package:meow]]

** Hacks
- The localleader bindings are accomplished via a hack.

** TODO Changelog
# This section will be machine generated. Don't edit it by hand.
/This module does not have a changelog yet./

* Installation

~mkdir -p ~/.doom.d/modules/editor && git clone <this-module-url> ~/.doom.d/modules/editor/meow~

[[id:01cffea4-3329-45e2-a892-95a384ab2338][Enable this module in your ~doom!~ block.]]
(add =(meow +your-desired-flags...)= after the =:editor= section in =init.el=)

The leader and localleader bindings are defined in [[doom-module::config default
+bindings]], so that module is required for them to work.

This module will not work smoothly with [[doom-module::editor evil]],
[[doom-module::editor god]], or [[doom-module::editor objed]]. You must disable those
modules in your ~doom!~ block to use this one.

* TODO Usage
#+begin_quote
 󱌣 /This module's usage documentation is incomplete./ [[doom-contrib-module:][Complete it?]]
#+end_quote

Please refer to [[https://github.com/meow-edit/meow/blob/master/README.org][Meow's docs]] for any information not related to Doom or this
module.

** Leader and localleader integration

This module configures Meow's Keypad state such that it can be used to access
Doom's leader/localleader bindings, as set up by [[doom-module::config default
+bindings]]. Note that since this module cannot be used with Evil, you'll be using
Doom's Emacs leader/localleader bindings
([[emacsdir:modules/config/default/+emacs-bindings.el]]), which are not the same as
its Evil ones.

As described [[https://github.com/meow-edit/meow/blob/master/TUTORIAL.org#keypad][in Meow's documentation]], when a key other than =x= / =h= / =c= /
=m= / =g= is pressed in Keypad state, it is directly looked up in the leader
keymap. This module sets =doom-leader-map= (bound to =C-c= by default) as the
leader keymap. So, for example, =SPC s p= produces =C-c s p=.

Some tweaks were necessary in order to accomodate the differences of Keypad state -

- ~doom-leader-code-map~ is bound to =k=, as =c= is taken by Keypad.

- Localleader is bound to =l=, as =m= is taken.

* Configuration

** Cursor

In Emacs, the cursor is always considered to be located /between/ two
characters. In Vim, the cursor is always considered to be /on top of/ a
character. Evil manages to accomplish the latter behavior, but Meow [[https://github.com/meow-edit/meow/discussions/87#discussion-3721642][does not
attempt]] to do so. In order to help Evil/Vim users adjust, this module includes a
custom cursor configuration -

- The 'bar' cursor shape is used in most cases, as it sits between two
  characters.
  You can change this by setting any of the ~meow-cursor-type-*~ variables.

- Since we don't use the block cursor shape to indicate Normal state, we instead
  blink the cursor to indicate when we're in Insert state.
  You can disable this by setting ~+meow-want-blink-cursor-in-insert~ to ~nil~.

** Disabling bindings for certain modes

In modes that bind unmodified keys, Meow starts in 'Motion' state. The default
bindings for Motion state (with =+qwerty=) bind =j= and =k= to ~next-line~ and
~previous-line~, respectively; and =SPC= triggers Keypad state. This is only
useful in modes where moving over lines is a meaningful concept, and =SPC=
doesn't have an important binding.

For modes that don't fit the above description, this module defines a custom
'Emacs' state. This state has only two bindings - =M-SPC= to trigger Keypad
(this binding is also added in Insert state), and =C-]= to switch to Motion
state. Once in Motion state, you can use =C-]= to switch to Meow's 'temp Normal'
state if you need more of Meow's bindings.

For example, to make ~pdf-view-mode~ start in Emacs state:
#+begin_src emacs-lisp
;; in $DOOMDIR/config.el
(add-to-list 'meow-mode-state-list '(pdf-view-mode . emacs))
#+end_src

** Disabling expansion hints for some modes

The expansion hints are known to work poorly with variable-width fonts (see [[https://github.com/meow-edit/meow/issues/110][this
issue]]). If you encounter this problem, you should disable them for the modes in
which you use those fonts -
#+begin_src emacs-lisp
;; in $DOOMDIR/config.el
;; For example, to disable expansion hints in org-mode -
(add-to-list 'meow-expand-exclude-mode-list 'org-mode)
#+end_src


** ~map!~ vs ~meow-define-keys~

Doom's ~map!~ and Meow's ~meow-define-keys~ are largely equivalent in terms of
functionality. ~(map! :map meow-normal-state-keymap ...)~ and ~(meow-define-keys
'normal ...)~ (and ~(meow-normal-define-keys ...)~) will do the same thing, as
far as this author is aware.

There is one exception - when binding a key to another key, ~meow-define-keys~
generates a command to execute that key, and binds to that. ~map!~ doesn't
explicitly support binding a key to another key, and when you try it, it binds
the key directly without a command wrapping it. This binding seems to get
overridden by any command bound to the same key.

* Troubleshooting
[[doom-report:][Report an issue?]]

** Prefix key descriptions in =which-key= popup
These do not show up properly when Keypad state is used. It is unclear where to
look for the source of the problem. The previous module also had [[https://github.com/meow-edit/doom-meow/issues/5][this issue]].

** Undo and [[doom-package:undo-fu]]
Meow's ~meow-undo~ expects the command bound to ~meow--kbd-undo~ (default =C-/=)
to behave like Emacs' built-in ~undo~ command. Undo-Fu remaps this command to
~undo-fu-only-undo~, which behaves differently, so ~meow-undo~ doesn't work
properly. Currently, the only workaround is to stop using Undo-Fu and learn
Emacs' default undo mechanism:
#+begin_src emacs-lisp
;; In $DOOMDIR/packages.el
(package! undo-fu :disable t)
#+end_src

* Frequently asked questions

** Mode-specific/state-specific Meow bindings
Unlike Evil, Meow does not directly support keybindings specific to a particular
mode or state. For example, there is no (direct) way to make =TAB= do one thing
in =org-mode= and another in =emacs-lisp-mode=. This is an intentional
limitation; see [[https://github.com/meow-edit/meow/pull/126#issuecomment-992004368][this issue comment]] for a discussion, and the recommended way of
achieving this kind of functionality.


* TODO Appendix
#+begin_quote
 󱌣 This module has no appendix yet. [[doom-contrib-module:][Write one?]]
#+end_quote
